generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Option {
  id       String    @id @default(cuid())
  isDark   Boolean?  @default(false)
  language Language?
  user     User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  password        String?
  passwordConfirm String?
  image           String?
  optionId        String?
  options         Option?   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  accounts        Account[]
  sessions        Session[]
  role            Role?     @default(USER)
  files           File[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model File {
  id        String    @unique @default(cuid())
  createdAt DateTime? @default(now())
  fileName  String    @db.VarChar(255)
  size      Int
  url       String
  location  Location? @default(DRIVE)
  ownerId   String
  user      User?     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum Location {
  DRIVE
  TRASH
}

enum Language {
  en
  ptBR
}

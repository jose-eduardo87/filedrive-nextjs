vídeo prisma criando um blog:
https://www.youtube.com/watch?v=7ihvEtBAjRY&list=PLn2e1F9Rfr6k6MwzS-p9FGK1NDBxxwLPk&index=6&ab_channel=Prisma

vídeo sobre o mapa em postgresql:
https://www.youtube.com/watch?v=Bqacj0iOL68&ab_channel=LeighHalliday

prisma doc sobre models:
https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

Github sobre exemplos do prisma:
https://github.com/prisma/templates

----------

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  password        String
  passwordConfirm String
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role?     @default(USER)
  files           File[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model File {
  id        String    @unique @default(cuid())
  createdAt DateTime  @default(now())
  fileName  String    @db.VarChar(255)
  size      Decimal   @db.Decimal(10, 2)
  location  Location? @default(DRIVE)
  ownerId   String
  user      User?     @relation(fields: [ownerId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum Location {
  DRIVE
  TRASH
}


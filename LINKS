// vídeo prisma criando um blog:
// https://www.youtube.com/watch?v=7ihvEtBAjRY&list=PLn2e1F9Rfr6k6MwzS-p9FGK1NDBxxwLPk&index=6&ab_channel=Prisma

// vídeo sobre o mapa em postgresql:
// https://www.youtube.com/watch?v=Bqacj0iOL68&ab_channel=LeighHalliday

// prisma doc sobre models:
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

// Github sobre exemplos do prisma:
// https://github.com/prisma/templates

// ----------

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String  @map("user_id")
//   type              String
//   provider          String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model User {
//   id              String    @id @default(cuid())
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   name            String?
//   email           String?   @unique
//   emailVerified   DateTime? @map("email_verified")
//   password        String
//   passwordConfirm String
//   image           String?
//   accounts        Account[]
//   sessions        Session[]
//   role            Role?     @default(USER)
//   files           File[]

//   @@map("users")
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }

// model File {
//   id        String    @unique @default(cuid())
//   createdAt DateTime  @default(now())
//   fileName  String    @db.VarChar(255)
//   size      Decimal   @db.Decimal(10, 2)
//   location  Location? @default(DRIVE)
//   ownerId   String
//   user      User?     @relation(fields: [ownerId], references: [id])
// }

// enum Role {
//   ADMIN
//   USER
// }

// enum Location {
//   DRIVE
//   TRASH
// }

// ## FILEDRIVE-NEXTJS

// ## 1. Introduction

// This project aims to provide a file storage service for registered users. I decided on creating this app mainly to learn about stuff I haven't had the chance to put my hands on before. Creating this application was a fun journey where I learnt a lot about things I could use in future projects. 

// It was my first contact with a relational database. For quite a long time, I had a desire to use PostgreSQL so I took the plunge and chose it to be my database for this app. It became clearer to me when/should I use a relational db over a noSQL one. It also made me see the differences between SQL and noSQL when it comes to their own particularities: "the way I do this thing in MongoDB is so different than it is in Postgre" or maybe "wow, Prisma makes working with this stuff very easy!", and so on.

// I have been using Next Auth for my authentication needs on my latest projects but never had the chance to go deeper with it. On this project, users have the option to log in to the system via google or by creating an account to the app's own signing system. Needless to say that Next auth did all the heavy-lifting for me - I got my routes protected from unauthenticated users, 3rd-party log in Providers work beautifully and in less than two days I made my application really secure with no sweat.

// It is no big news to see modern applications using drag and drop functionality. The way users move their files from drive to bin (and vice-versa) could be done by dragging and dropping files. It was a nice learning curve until I got stuck in a very particular problem involving D'n'D plus the ability of having a central place to manage state of all the files in the bin. After some days architecting ways of making the job done, learning ins and outs about React's inner nature, like the useEffect limitation of having state values when it first ran, the impossibility of using hooks inside loops, conditionals and nested functions, I finally managed to do it. I talked about that problem in more detail on use-checkbox.ts file, on hooks folder.

// AWS S3. My first time using it and I confess I feared doing something wrong and having to sell my house to pay the bills. Good thing about it is that internet is full of resources talking about it.

// TypeScript. Even though I had some experience working with TS in non-react projects, it was my first time using it in a NextJS project. Simply put, TS is awesome.

// All in all, I am pretty proud of what I have done on this app. It works, and it works really well. It is optimized thanks to React's own tools. Tried to make my code as clean and organized as I can.

// ## 2. Getting Started

// First, clone this repo or download the files. Navigate to the root folder and install the dependencies by typing: 

// ```bash
// npm install
// # or
// yarn install
// ```

// Then run the development server:

// ```bash
// npm run dev
// # or
// yarn dev
// ```

// Open [http://localhost:3000](http://localhost:3000) with your browser to see the app running.

// ## 3. See it live

// Access this link to see the page in action. <ADICIONAR LINK QUANDO APP FOR DEPLOYED>

// ## 4. Feedback
  
// I would love to hear some feedback on this application. If you have any suggestions, improvements or just want to chat, you can reach out to me on my social pages:
//   <INCLUIR LINK PARA SOCIAL>